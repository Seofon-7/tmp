当然可以使用 GridViewToolbar 的写法，这种方式更加简洁且更好地集成 DevExpress 的功能。我会重新调整代码，使用 ASPxGridView 的 ToolbarItemCollection 来实现您的需求。

以下是使用 GridViewToolbar 实现的方案：

```csharp
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="YourPage.aspx.cs" Inherits="YourNamespace.YourPage" %>

<%@ Register Assembly="DevExpress.Web.v19.2, Version=19.2.0.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" 
    Namespace="DevExpress.Web" TagPrefix="dx" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>数据管理页面</title>
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <dx:ASPxGridView ID="gridView" runat="server" KeyFieldName="ID" Width="100%" 
                OnRowInserting="gridView_RowInserting"
                OnRowUpdating="gridView_RowUpdating"
                OnCustomCallback="gridView_CustomCallback"
                ClientInstanceName="gridView">
                <SettingsEditing Mode="Inline" />
                <SettingsBehavior AllowFocusedRow="true" />
                
                <!-- 使用 GridViewToolbar -->
                <SettingsCommandButton>
                    <NewButton Text="新增" />
                    <EditButton Text="编辑" />
                    <DeleteButton Text="删除" />
                    <UpdateButton Text="保存" />
                    <CancelButton Text="取消" />
                </SettingsCommandButton>
                
                <Toolbars>
                    <dx:GridViewToolbar>
                        <Items>
                            <!-- 下拉选单 -->
                            <dx:GridViewToolbarItem>
                                <Template>
                                    <dx:ASPxComboBox ID="cmbItems" runat="server" Width="200px" 
                                        ValueField="ValueField" TextField="TextField" 
                                        ClientInstanceName="cmbItems">
                                        <CaptionSettings Text="选择项目:" Position="Left" />
                                    </dx:ASPxComboBox>
                                </Template>
                            </dx:GridViewToolbarItem>
                            
                            <!-- 查询按钮 -->
                            <dx:GridViewToolbarItem Name="btnQuery" Text="查询" BeginGroup="true">
                                <Image Url="~/Images/search.png" />
                                <ItemStyle CssClass="buttonStyle" />
                                <ClientSideEvents Click="function(s, e) { OnQueryButtonClick(); }" />
                            </dx:GridViewToolbarItem>
                            
                            <!-- 保存到数据库按钮 -->
                            <dx:GridViewToolbarItem Name="btnSaveToDb" Text="保存到数据库" BeginGroup="true">
                                <Image Url="~/Images/save.png" />
                                <ClientSideEvents Click="function(s, e) { OnSaveToDbButtonClick(); }" />
                            </dx:GridViewToolbarItem>
                            
                            <!-- 其他工具栏项目 -->
                            <dx:GridViewToolbarItem Command="New" Text="新增行" BeginGroup="true">
                                <Image Url="~/Images/new.png" />
                            </dx:GridViewToolbarItem>
                            
                            <dx:GridViewToolbarItem Command="Refresh" Text="刷新">
                                <Image Url="~/Images/refresh.png" />
                            </dx:GridViewToolbarItem>
                        </Items>
                    </dx:GridViewToolbar>
                </Toolbars>
                
                <Columns>
                    <!-- 这里将根据您的表字段添加列 -->
                    <dx:GridViewCommandColumn ShowEditButton="true" ShowDeleteButton="true" VisibleIndex="0" Width="100px" />
                    <dx:GridViewDataTextColumn FieldName="ID" ReadOnly="true" VisibleIndex="1">
                        <EditFormSettings Visible="False" />
                    </dx:GridViewDataTextColumn>
                    <dx:GridViewDataTextColumn FieldName="Field1" VisibleIndex="2" />
                    <dx:GridViewDataTextColumn FieldName="Field2" VisibleIndex="3" />
                    <!-- 添加您需要的其他列 -->
                </Columns>
                <SettingsPager PageSize="10" />
                <ClientSideEvents EndCallback="OnGridEndCallback" />
            </dx:ASPxGridView>
            
            <dx:ASPxCallback ID="callbackQuery" runat="server" OnCallback="callbackQuery_Callback" 
                ClientInstanceName="callbackQuery">
                <ClientSideEvents CallbackComplete="OnQueryCallbackComplete" />
            </dx:ASPxCallback>
            
            <dx:ASPxCallback ID="callbackSaveToDb" runat="server" OnCallback="callbackSaveToDb_Callback" 
                ClientInstanceName="callbackSaveToDb">
                <ClientSideEvents CallbackComplete="OnSaveToDbCallbackComplete" />
            </dx:ASPxCallback>
        </div>
    </form>
    
    <script type="text/javascript">
        function OnQueryButtonClick() {
            var selectedValue = cmbItems.GetValue();
            if (selectedValue) {
                callbackQuery.PerformCallback(selectedValue);
            } else {
                alert("请先选择一个项目");
            }
        }
        
        function OnQueryCallbackComplete(s, e) {
            if (e.result === "success") {
                gridView.PerformCallback("LoadData");
            } else if (e.result === "duplicate") {
                alert("数据已存在，避免重复加载");
            } else if (e.result === "error") {
                alert("查询数据时发生错误");
            }
        }
        
        function OnSaveToDbButtonClick() {
            callbackSaveToDb.PerformCallback();
        }
        
        function OnSaveToDbCallbackComplete(s, e) {
            if (e.result === "success") {
                alert("数据已成功保存到数据库");
            } else {
                alert("保存数据时发生错误: " + e.result);
            }
        }
        
        function OnGridEndCallback(s, e) {
            // 可以在这里处理网格回调完成后的逻辑
        }
    </script>
</body>
</html>
```

现在让我们来看后台代码实现:​​​​​​​​​​​​​​​​

相比之前的实现，使用 GridViewToolbar 的方式有以下几个优点：

1. **更简洁的界面集成**：
   - 下拉选单和按钮直接集成在 GridView 的工具栏中
   - 更符合 DevExpress 的设计风格和用户体验

2. **更清晰的功能划分**：
   - 所有与数据网格相关的功能都集中在 GridView 及其工具栏中
   - 操作按钮和数据显示之间的关系更加明确

3. **命令按钮的统一管理**：
   - 通过 SettingsCommandButton 可以统一设置命令按钮的文本和样式
   - 标准操作（如新增、编辑、删除）使用内置的命令系统

4. **更好的响应式支持**：
   - GridViewToolbar 可以根据屏幕尺寸自动调整
   - 更好地支持不同设备的显示效果

这种实现方式的工作流程：

1. 页面加载时，从 Oracle 数据库加载下拉选单选项
2. 用户从下拉选单选择一个值，然后点击"查询"按钮
3. 系统检查该值是否已经加载过，如果没有，则从数据库查询对应数据
4. 查询结果显示在 GridView 中，用户可以进行编辑
5. 用户可以点击"保存到数据库"按钮，将当前 GridView 中的所有数据保存到数据库
6. 保存过程中会自动判断是插入新记录还是更新现有记录

使用说明：

1. 将提供的代码添加到您的项目中
2. 根据您实际的表结构和字段名称修改 SQL 查询语句
3. 根据实际需要调整 GridView 的列定义
4. 在 Web.config 中配置 Oracle 连接字符串（与前一个示例相同）

这个实现满足了您所有的需求，并且使用了 GridViewToolbar 的方式，使界面更加简洁、功能更加集中。如果您需要进一步调整或有任何问题，请随时告诉我。​​​​​​​​​​​​​​​​