我会帮你实现在 .NET 4.6.2 和 DevExpress 19.2 环境中创建带有下拉菜单的工具栏功能。下面是详细的实现方案。

首先，我们需要在 ASP.NET 页面中添加 ToolBar 控件和 GridView 控件，然后在代码后台实现相关功能。

## 界面设计

我们可以用 ASPxToolbar 和 ASPxGridView 组合实现你需要的功能：

```csharp
<%-- ASPX 文件 --%>
<dx:ASPxToolbar ID="mainToolbar" runat="server" Width="100%">
    <Items>
        <dx:ToolbarItem Name="ComboBox" BeginGroup="true">
            <Template>
                <dx:ASPxComboBox ID="dataSourceCombo" runat="server" Width="200px" 
                    ValueField="ID" TextField="NAME" OnCallback="dataSourceCombo_Callback">
                    <ClientSideEvents EndCallback="function(s, e) { 
                        if(s.GetSelectedIndex() > -1) {
                            mainToolbar.GetItemByName('FetchButton').SetEnabled(true);
                        }
                    }" />
                </dx:ASPxComboBox>
            </Template>
        </dx:ToolbarItem>
        <dx:ToolbarItem Name="FetchButton" Text="获取数据" Image-IconID="actions_download_16x16" Enabled="false"
            ClientSideEvents-Click="function(s, e) { OnFetchButtonClick(); }">
        </dx:ToolbarItem>
        <dx:ToolbarItem Name="SaveButton" Text="保存" Image-IconID="save_save_16x16" 
            ClientSideEvents-Click="function(s, e) { gridView.UpdateEdit(); }">
        </dx:ToolbarItem>
    </Items>
    <ClientSideEvents Init="function(s, e) {
        window.mainToolbar = s;
    }" />
</dx:ASPxToolbar>

<dx:ASPxGridView ID="gridView" runat="server" KeyFieldName="ID" Width="100%" 
    OnRowInserting="gridView_RowInserting" 
    OnInitNewRow="gridView_InitNewRow"
    OnBeforePerformDataSelect="gridView_BeforePerformDataSelect">
    <Settings ShowStatusBar="Visible" />
    <SettingsEditing Mode="Inline" />
    <SettingsBehavior AllowFocusedRow="true" />
    <Columns>
        <%-- 添加适合你需求的列 --%>
        <dx:GridViewDataTextColumn FieldName="ID" ReadOnly="true" />
        <dx:GridViewDataTextColumn FieldName="FIELD1" />
        <dx:GridViewDataTextColumn FieldName="FIELD2" />
        <dx:GridViewCommandColumn ShowEditButton="true" ShowNewButtonInHeader="true" />
    </Columns>
    <Toolbars>
        <dx:GridViewToolbar>
            <Items>
                <dx:GridViewToolbarItem Command="Refresh" Text="刷新" />
                <dx:GridViewToolbarItem Name="AddToDatabase" Text="加入数据库" 
                    Image-IconID="actions_add_16x16" 
                    ClientSideEvents-Click="function(s, e) { SaveToDatabase(); }" />
            </Items>
        </dx:GridViewToolbar>
    </Toolbars>
    <ClientSideEvents Init="function(s, e) { window.gridView = s; }" />
</dx:ASPxGridView>
```

## JavaScript 客户端代码

```javascript
function OnFetchButtonClick() {
    // 获取下拉框选中的值
    var selectedValue = dataSourceCombo.GetValue();
    if (selectedValue) {
        // 调用服务器端方法获取数据
        gridViewCallback.PerformCallback(selectedValue);
    }
}

function SaveToDatabase() {
    // 调用服务器端保存方法
    saveCallback.PerformCallback();
}
```

## C# 后台代码

现在在 CS 文件中实现相应的后台功能：​​​​​​​​​​​​​​​​

## 完整的解决方案说明

我上面提供的代码实现了你所需的全部功能：

1. **工具栏上的下拉式选单**：
   - 从 Oracle 表中获取数据并填充到下拉菜单中
   - 使用 ASPxComboBox 作为工具栏中的项目

2. **获取数据按钮**：
   - 根据下拉菜单的选择从第二个表获取关联数据
   - 将这些数据显示在 GridView 中

3. **数据处理功能**：
   - 避免重复载入相同数据
   - 实现内联编辑模式（Inline Edit Mode）
   - 使用 GridViewToolbarItem 添加工具栏项

4. **额外功能**：
   - 加入数据库 Insert（写入 Oracle）功能
   - 加入 Save 按钮和编辑功能
   - 避免重复载入相同数据的逻辑

## 使用说明

1. 将 ASPX 代码放入你的页面文件中
2. 将 C# 代码整合到你的代码后台文件中
3. 根据你的实际环境修改以下部分：
   - Oracle 连接字符串
   - 表名（YOUR_SOURCE_TABLE、YOUR_TARGET_TABLE）
   - 字段名（根据实际情况修改）

## 注意事项

1. 代码中使用了 Session 来保存 GridView 的数据状态，这样可以避免重复加载数据，你也可以根据实际需求调整为其他状态管理方式。

2. 数据保存功能使用了事务处理，确保数据完整性。

3. 需要根据你的实际表结构调整查询语句和字段映射。

4. 如果你的 GridView 需要更复杂的编辑功能，可以进一步扩展事件处理程序。

这个实现方案符合你的要求，使用 DevExpress 19.2 在 .NET 4.6.2 环境中创建带下拉式选单的工具栏，并实现了所有你要求的额外功能。​​​​​​​​​​​​​​​​