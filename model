using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web.UI;
using DevExpress.Web;
using Oracle.ManagedDataAccess.Client;
using Newtonsoft.Json;

namespace SpcToolManagement
{
    public partial class SpcToolRank : System.Web.UI.Page
    {
        private string _connectionString = ConfigurationManager.ConnectionStrings["OracleConnection"].ConnectionString;
        
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                LoadSpcToolRankData();
            }
            
            // Register client-side script for handling custom button events
            gridSpcToolRank.ClientSideEvents.CustomButtonClick = "function(s, e) { if(e.buttonID === 'btnAdd') { showAddPopup(true); } }";
            gridSpcToolRank.ClientSideEvents.RowInserting = "function(s, e) { TrackChangedRow(e.visibleIndex, 'Insert', e.newValues); }";
            gridSpcToolRank.ClientSideEvents.RowUpdating = "function(s, e) { TrackChangedRow(e.visibleIndex, 'Update', e.newValues); }";
            gridSpcToolRank.ClientSideEvents.RowDeleting = "function(s, e) { TrackChangedRow(e.visibleIndex, 'Delete', null); }";
            
            // Register script for tracking changes
            string script = @"
                if(!gridSpcToolRank.cpChangedRows) gridSpcToolRank.cpChangedRows = [];
                
                function TrackChangedRow(visibleIndex, operation, values) {
                    var keyValue = gridSpcToolRank.GetRowKey(visibleIndex);
                    
                    // Find if this row is already in the changed rows array
                    var existingIndex = -1;
                    for(var i = 0; i < gridSpcToolRank.cpChangedRows.length; i++) {
                        if(gridSpcToolRank.cpChangedRows[i].KeyValue === keyValue) {
                            existingIndex = i;
                            break;
                        }
                    }
                    
                    // Handle frequency value for updated rows
                    if(operation === 'Update' && values) {
                        var frequencyColumn = gridSpcToolRank.GetColumnByField('FREQUENCY');
                        var columnIndex = gridSpcToolRank.GetColumnIndexByField('FREQUENCY');
                        
                        if(columnIndex >= 0 && frequencyColumn.fieldName === 'FREQUENCY') {
                            var editor = gridSpcToolRank.GetEditor(columnIndex);
                            if(editor) {
                                var countCtrl = ASPxClientControl.GetControlCollection().GetByName('seFrequencyCount');
                                var typeCtrl = ASPxClientControl.GetControlCollection().GetByName('cboFrequencyType');
                                var valueCtrl = ASPxClientControl.GetControlCollection().GetByName('seFrequencyValue');
                                
                                if(countCtrl && typeCtrl && valueCtrl) {
                                    values[columnIndex] = countCtrl.GetValue() + '次:' + valueCtrl.GetValue() + typeCtrl.GetValue();
                                }
                            }
                        }
                    }
                    
                    // Create change record
                    var changeRecord = {
                        KeyValue: keyValue,
                        Operation: operation,
                        Values: values
                    };
                    
                    // Add or update in changed rows array
                    if(existingIndex >= 0) {
                        gridSpcToolRank.cpChangedRows[existingIndex] = changeRecord;
                    } else {
                        gridSpcToolRank.cpChangedRows.push(changeRecord);
                    }
                }
            ";
            
            ScriptManager.RegisterClientScriptBlock(this, GetType(), "TrackChangesScript", script, true);
        }
        
        protected void LoadSpcToolRankData()
        {
            using (OracleConnection conn = new OracleConnection(_connectionString))
            {
                try
                {
                    conn.Open();
                    OracleCommand cmd = new OracleCommand("SELECT ID, CHP_GRP, LAYER, OPE_NO, PR, FREQUENCY FROM SPC_TOOL_RANK ORDER BY CHP_GRP, LAYER, OPE_NO", conn);
                    OracleDataAdapter adapter = new OracleDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    adapter.Fill(dt);
                    
                    gridSpcToolRank.DataSource = dt;
                    gridSpcToolRank.DataBind();
                    
                    // Get all CHP_GRP values for client-side use
                    cmd = new OracleCommand("SELECT DISTINCT CHP_GRP FROM FLOW_MAPPING ORDER BY CHP_GRP", conn);
                    DataTable dtChpGrp = new DataTable();
                    adapter = new OracleDataAdapter(cmd);
                    adapter.Fill(dtChpGrp);
                    
                    List<object> chpGrpItems = new List<object>();
                    foreach (DataRow row in dtChpGrp.Rows)
                    {
                        chpGrpItems.Add(new { text = row["CHP_GRP"].ToString(), value = row["CHP_GRP"].ToString() });
                    }
                    
                    string chpGrpJson = JsonConvert.SerializeObject(chpGrpItems);
                    gridSpcToolRank.JSProperties["cpChpGrpItems"] = chpGrpJson;
                }
                catch (Exception ex)
                {
                    // Handle exception
                    ScriptManager.RegisterClientScriptBlock(this, GetType(), "AlertError", 
                        $"alert('資料載入錯誤: {ex.Message}');", true);
                }
            }
        }
        
        protected void gridSpcToolRank_RowInserting(object sender, DevExpress.Web.Data.ASPxDataInsertingEventArgs e)
        {
            // Prevent the default database insertion, we will handle this in batch
            e.Cancel = true;
            
            // Generate a temporary ID for the new row
            e.NewValues["ID"] = "NEW_" + Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10);
            
            // Add the row to the grid
            gridSpcToolRank.JSProperties["cpResult"] = "RowInserted";
        }
        
        protected void gridSpcToolRank_RowUpdating(object sender, DevExpress.Web.Data.ASPxDataUpdatingEventArgs e)
        {
            // Prevent the default database update, we will handle this in batch
            e.Cancel = true;
            gridSpcToolRank.JSProperties["cpResult"] = "RowUpdated";
        }
        
        protected void gridSpcToolRank_RowDeleting(object sender, DevExpress.Web.Data.ASPxDataDeletingEventArgs e)
        {
            // Prevent the default database deletion, we will handle this in batch
            e.Cancel = true;
            gridSpcToolRank.JSProperties["cpResult"] = "RowDeleted";
        }
        
        protected void gridSpcToolRank_CustomButtonCallback(object sender, ASPxGridViewCustomButtonCallbackEventArgs e)
        {
            // Handle custom button callbacks
            string result = "Error";
            
            if (e.ButtonID == "btnAdd")
            {
                result = "ShowAddPopup";
            }
            
            gridSpcToolRank.JSProperties["cpCustomButtonResult"] = result;
        }
        
        protected void callbackSaveAll_Callback(object source, DevExpress.Web.CallbackEventArgs e)
        {
            try
            {
                string changedRowsJson = hfEditedRows.Get("ChangedRows").ToString();
                List<ChangeRecord> changedRows = JsonConvert.DeserializeObject<List<ChangeRecord>>(changedRowsJson);
                
                if (changedRows == null || changedRows.Count == 0)
                {
                    e.Result = "NoChanges";
                    return;
                }
                
                using (OracleConnection conn = new OracleConnection(_connectionString))
                {
                    conn.Open();
                    OracleTransaction transaction = conn.BeginTransaction();
                    
                    try
                    {
                        foreach (var record in changedRows)
                        {
                            if (record.Operation == "Insert")
                            {
                                InsertRecord(conn, transaction, record);
                            }
                            else if (record.Operation == "Update")
                            {
                                UpdateRecord(conn, transaction, record);
                            }
                            else if (record.Operation == "Delete")
                            {
                                DeleteRecord(conn, transaction, record);
                            }
                        }
                        
                        transaction.Commit();
                        e.Result = "Success";
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        e.Result = ex.Message;
                    }
                }
            }
            catch (Exception ex)
            {
                e.Result = ex.Message;
            }
        }
        
        private void InsertRecord(OracleConnection conn, OracleTransaction transaction, ChangeRecord record)
        {
            Dictionary<string, object> values = GetValuesAsDictionary(record.Values);
            
            // Generate a new Oracle sequence ID
            OracleCommand cmdSeq = new OracleCommand("SELECT SPC_TOOL_RANK_SEQ.NEXTVAL FROM DUAL", conn, transaction);
            decimal newId = Convert.ToDecimal(cmdSeq.ExecuteScalar());
            
            string sql = @"
                INSERT INTO SPC_TOOL_RANK 
                (ID, CHP_GRP, LAYER, OPE_NO, PR, FREQUENCY) 
                VALUES (:ID, :CHP_GRP, :LAYER, :OPE_NO, :PR, :FREQUENCY)";
            
            OracleCommand cmd = new OracleCommand(sql, conn, transaction);
            cmd.Parameters.Add(":ID", OracleDbType.Decimal).Value = newId;
            cmd.Parameters.Add(":CHP_GRP", OracleDbType.Varchar2).Value = values.ContainsKey("CHP_GRP") ? values["CHP_GRP"] : DBNull.Value;
            cmd.Parameters.Add(":LAYER", OracleDbType.Varchar2).Value = values.ContainsKey("LAYER") ? values["LAYER"] : DBNull.Value;
            cmd.Parameters.Add(":OPE_NO", OracleDbType.Varchar2).Value = values.ContainsKey("OPE_NO") ? values["OPE_NO"] : DBNull.Value;
            cmd.Parameters.Add(":PR", OracleDbType.Varchar2).Value = values.ContainsKey("PR") ? values["PR"] : DBNull.Value;
            cmd.Parameters.Add(":FREQUENCY", OracleDbType.Varchar2).Value = values.ContainsKey("FREQUENCY") ? values["FREQUENCY"] : DBNull.Value;
            
            cmd.ExecuteNonQuery();
        }
        
        private void UpdateRecord(OracleConnection conn, OracleTransaction transaction, ChangeRecord record)
        {
            Dictionary<string, object> values = GetValuesAsDictionary(record.Values);
            
            string sql = @"
                UPDATE SPC_TOOL_RANK 
                SET CHP_GRP = :CHP_GRP,
                    LAYER = :LAYER,
                    OPE_NO = :OPE_NO,
                    PR = :PR,
                    FREQUENCY = :FREQUENCY
                WHERE ID = :ID";
            
            OracleCommand cmd = new OracleCommand(sql, conn, transaction);
            cmd.Parameters.Add(":CHP_GRP", OracleDbType.Varchar2).Value = values.ContainsKey("CHP_GRP") ? values["CHP_GRP"] : DBNull.Value;
            cmd.Parameters.Add(":LAYER", OracleDbType.Varchar2).Value = values.ContainsKey("LAYER") ? values["LAYER"] : DBNull.Value;
            cmd.Parameters.Add(":OPE_NO", OracleDbType.Varchar2).Value = values.ContainsKey("OPE_NO") ? values["OPE_NO"] : DBNull.Value;
            cmd.Parameters.Add(":PR", OracleDbType.Varchar2).Value = values.ContainsKey("PR") ? values["PR"] : DBNull.Value;
            cmd.Parameters.Add(":FREQUENCY", OracleDbType.Varchar2).Value = values.ContainsKey("FREQUENCY") ? values["FREQUENCY"] : DBNull.Value;
            cmd.Parameters.Add(":ID", OracleDbType.Decimal).Value = Convert.ToDecimal(record.KeyValue);
            
            cmd.ExecuteNonQuery();
        }
        
        private void DeleteRecord(OracleConnection conn, OracleTransaction transaction, ChangeRecord record)
        {
            string sql = "DELETE FROM SPC_TOOL_RANK WHERE ID = :ID";
            
            OracleCommand cmd = new OracleCommand(sql, conn, transaction);
            cmd.Parameters.Add(":ID", OracleDbType.Decimal).Value = Convert.ToDecimal(record.KeyValue);
            
            cmd.ExecuteNonQuery();
        }
        
        private Dictionary<string, object> GetValuesAsDictionary(object values)
        {
            if (values == null)
                return new Dictionary<string, object>();
                
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(
                JsonConvert.SerializeObject(values));
        }
        
        protected int GetFrequencyCount(object frequencyValue)
        {
            if (frequencyValue == null || string.IsNullOrEmpty(frequencyValue.ToString()))
                return 1;
                
            string frequency = frequencyValue.ToString();
            Match match = Regex.Match(frequency, @"(\d+)次");
            
            if (match.Success && match.Groups.Count > 1)
            {
                return Convert.ToInt32(match.Groups[1].Value);
            }
            
            return 1;
        }
        
        protected string GetFrequencyType(object frequencyValue)
        {
            if (frequencyValue == null || string.IsNullOrEmpty(frequencyValue.ToString()))
                return "天";
                
            string frequency = frequencyValue.ToString();
            
            if (frequency.Contains