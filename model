// 1. 首先創建項目結構
// 設置基本類別和模型

// Model/SpcToolRank.cs - 定義數據模型
using System;
using System.ComponentModel.DataAnnotations;

namespace SpcToolRankWeb.Models
{
    public class SpcToolRank
    {
        public string ChpGrp { get; set; }
        public string Layer { get; set; }
        public string OpeNo { get; set; }
        public string PR { get; set; }
        public string Frequency { get; set; }
        
        // 用於標記數據狀態，用於批量保存
        public enum DataState
        {
            Unchanged,
            Added,
            Modified,
            Deleted
        }
        
        public DataState State { get; set; } = DataState.Unchanged;
    }
    
    // 用於頻率選擇的輔助類
    public class FrequencySettings
    {
        public int Count { get; set; }
        public string Unit { get; set; } // "天" 或 "週"
        public int UnitCount { get; set; }
        
        // 解析頻率字符串
        public static FrequencySettings Parse(string frequency)
        {
            if (string.IsNullOrEmpty(frequency))
                return new FrequencySettings { Count = 1, Unit = "天", UnitCount = 1 };
                
            try
            {
                var parts = frequency.Split(':');
                if (parts.Length != 2)
                    return new FrequencySettings { Count = 1, Unit = "天", UnitCount = 1 };
                
                int count = int.Parse(parts[0].Replace("次", ""));
                
                string unitPart = parts[1];
                string unit = unitPart.Contains("天") ? "天" : "週";
                int unitCount = int.Parse(unitPart.Replace("天", "").Replace("週", ""));
                
                return new FrequencySettings
                {
                    Count = count,
                    Unit = unit,
                    UnitCount = unitCount
                };
            }
            catch
            {
                return new FrequencySettings { Count = 1, Unit = "天", UnitCount = 1 };
            }
        }
        
        // 轉換為保存格式
        public override string ToString()
        {
            return $"{Count}次:{UnitCount}{Unit}";
        }
    }
}

// Data/OracleDataAccess.cs - 數據訪問層
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using Oracle.ManagedDataAccess.Client;
using SpcToolRankWeb.Models;

namespace SpcToolRankWeb.Data
{
    public class OracleDataAccess
    {
        private string connectionString = ConfigurationManager.ConnectionStrings["OracleConnection"].ConnectionString;
        
        // 獲取SPC Tool Rank數據列表
        public List<SpcToolRank> GetSpcToolRanks(string chpGrpFilter = "")
        {
            var result = new List<SpcToolRank>();
            
            using (var conn = new OracleConnection(connectionString))
            {
                conn.Open();
                
                string sql = "SELECT chp_grp, layer, ope_no, pr, frequency FROM spc_tool_rank";
                
                if (!string.IsNullOrWhiteSpace(chpGrpFilter))
                {
                    sql += " WHERE chp_grp LIKE :chpGrp";
                }
                
                sql += " ORDER BY chp_grp, layer, ope_no";
                
                using (var cmd = new OracleCommand(sql, conn))
                {
                    if (!string.IsNullOrWhiteSpace(chpGrpFilter))
                    {
                        cmd.Parameters.Add(new OracleParameter("chpGrp", $"%{chpGrpFilter}%"));
                    }
                    
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            result.Add(new SpcToolRank
                            {
                                ChpGrp = reader["chp_grp"].ToString(),
                                Layer = reader["layer"].ToString(),
                                OpeNo = reader["ope_no"].ToString(),
                                PR = reader["pr"].ToString(),
                                Frequency = reader["frequency"].ToString(),
                                State = SpcToolRank.DataState.Unchanged
                            });
                        }
                    }
                }
            }
            
            return result;
        }
        
        // 獲取flow_mapping表中的chp_grp值列表
        public List<string> GetChpGrpList()
        {
            var result = new List<string>();
            
            using (var conn = new OracleConnection(connectionString))
            {
                conn.Open();
                
                string sql = "SELECT DISTINCT chp_grp FROM flow_mapping ORDER BY chp_grp";
                
                using (var cmd = new OracleCommand(sql, conn))
                {
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            result.Add(reader["chp_grp"].ToString());
                        }
                    }
                }
            }
            
            return result;
        }
        
        // 保存所有數據變更
        public void SaveChanges(List<SpcToolRank> toolRanks)
        {
            using (var conn = new OracleConnection(connectionString))
            {
                conn.Open();
                using (var transaction = conn.BeginTransaction())
                {
                    try
                    {
                        foreach (var item in toolRanks)
                        {
                            switch (item.State)
                            {
                                case SpcToolRank.DataState.Added:
                                    InsertSpcToolRank(conn, item);
                                    break;
                                case SpcToolRank.DataState.Modified:
                                    UpdateSpcToolRank(conn, item);
                                    break;
                                case SpcToolRank.DataState.Deleted:
                                    DeleteSpcToolRank(conn, item);
                                    break;
                            }
                        }
                        
                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                }
            }
        }
        
        // 插入新記錄
        private void InsertSpcToolRank(OracleConnection conn, SpcToolRank item)
        {
            string sql = @"INSERT INTO spc_tool_rank (chp_grp, layer, ope_no, pr, frequency) 
                          VALUES (:chpGrp, :layer, :opeNo, :pr, :frequency)";
            
            using (var cmd = new OracleCommand(sql, conn))
            {
                cmd.Parameters.Add(new OracleParameter("chpGrp", item.ChpGrp));
                cmd.Parameters.Add(new OracleParameter("layer", item.Layer));
                cmd.Parameters.Add(new OracleParameter("opeNo", item.OpeNo));
                cmd.Parameters.Add(new OracleParameter("pr", item.PR));
                cmd.Parameters.Add(new OracleParameter("frequency", item.Frequency));
                
                cmd.ExecuteNonQuery();
            }
        }
        
        // 更新現有記錄
        private void UpdateSpcToolRank(OracleConnection conn, SpcToolRank item)
        {
            string sql = @"UPDATE spc_tool_rank 
                          SET layer = :layer, 
                              ope_no = :opeNo, 
                              pr = :pr, 
                              frequency = :frequency
                          WHERE chp_grp = :chpGrp";
            
            using (var cmd = new OracleCommand(sql, conn))
            {
                cmd.Parameters.Add(new OracleParameter("layer", item.Layer));
                cmd.Parameters.Add(new OracleParameter("opeNo", item.OpeNo));
                cmd.Parameters.Add(new OracleParameter("pr", item.PR));
                cmd.Parameters.Add(new OracleParameter("frequency", item.Frequency));
                cmd.Parameters.Add(new OracleParameter("chpGrp", item.ChpGrp));
                
                cmd.ExecuteNonQuery();
            }
        }
        
        // 刪除記錄
        private void DeleteSpcToolRank(OracleConnection conn, SpcToolRank item)
        {
            string sql = "DELETE FROM spc_tool_rank WHERE chp_grp = :chpGrp";
            
            using (var cmd = new OracleCommand(sql, conn))
            {
                cmd.Parameters.Add(new OracleParameter("chpGrp", item.ChpGrp));
                cmd.ExecuteNonQuery();
            }
        }
    }
}

// 2. 創建網頁和控制器
// Default.aspx - 主頁面
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="SpcToolRankWeb.Default" %>
<%@ Register Assembly="DevExpress.Web.v19.2, Version=19.2.0.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" 
    Namespace="DevExpress.Web" TagPrefix="dx" %>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>SPC Tool Rank Management</title>
    <style type="text/css">
        .main-container {
            width: 95%;
            margin: 20px auto;
        }
        .toolbar {
            margin-bottom: 15px;
        }
        .frequency-container {
            display: flex;
            align-items: center;
        }
        .frequency-input {
            width: 60px;
            margin-right: 5px;
        }
        .frequency-select {
            width: 80px;
            margin: 0 5px;
        }
    </style>
</head>
<body>
    <form id="form1" runat="server">
        <div class="main-container">
            <dx:ASPxFormLayout ID="FormLayout" runat="server" Width="100%">
                <Items>
                    <dx:LayoutGroup Caption="SPC Tool Rank Management" Width="100%">
                        <Items>
                            <dx:LayoutItem ShowCaption="False">
                                <LayoutItemNestedControlCollection>
                                    <dx:LayoutItemNestedControlContainer>
                                        <div class="toolbar">
                                            <dx:ASPxButton ID="btnAdd" runat="server" Text="新增" AutoPostBack="false" Width="80px">
                                                <ClientSideEvents Click="function(s, e) { PreparePrefillData(); popupEditForm.Show(); }" />
                                            </dx:ASPxButton>
                                            <dx:ASPxButton ID="btnSave" runat="server" Text="儲存" AutoPostBack="true" Width="80px" OnClick="btnSave_Click" />
                                            <dx:ASPxTextBox ID="txtSearch" runat="server" Width="200px" NullText="輸入Chp_Grp搜尋..." />
                                            <dx:ASPxButton ID="btnSearch" runat="server" Text="搜尋" AutoPostBack="true" Width="80px" OnClick="btnSearch_Click" />
                                        </div>
                                    </dx:LayoutItemNestedControlContainer>
                                </LayoutItemNestedControlCollection>
                            </dx:LayoutItem>
                            <dx:LayoutItem ShowCaption="False">
                                <LayoutItemNestedControlCollection>
                                    <dx:LayoutItemNestedControlContainer>
                                                                                    <dx:ASPxGridView ID="gridToolRank" runat="server" Width="100%" KeyFieldName="ChpGrp"
                                            OnRowInserting="gridToolRank_RowInserting"
                                            OnRowUpdating="gridToolRank_RowUpdating"
                                            OnRowDeleting="gridToolRank_RowDeleting"
                                            OnCustomColumnDisplayText="gridToolRank_CustomColumnDisplayText"
                                            ClientInstanceName="gridToolRank">
                                            <SettingsPager PageSize="20" />
                                            <SettingsEditing Mode="Inline" />
                                            <SettingsBehavior AllowFocusedRow="true" />
                                            <Columns>
                                                <dx:GridViewCommandColumn ShowEditButton="true" ShowDeleteButton="true" Width="100" />
                                                <dx:GridViewDataTextColumn FieldName="ChpGrp" Caption="Chp_Grp" Width="150">
                                                    <PropertiesTextEdit>
                                                        <ValidationSettings RequiredField-IsRequired="true" />
                                                    </PropertiesTextEdit>
                                                </dx:GridViewDataTextColumn>
                                                <dx:GridViewDataTextColumn FieldName="Layer" Caption="Layer" Width="120">
                                                    <PropertiesTextEdit>
                                                        <ValidationSettings RequiredField-IsRequired="true" />
                                                    </PropertiesTextEdit>
                                                </dx:GridViewDataTextColumn>
                                                <dx:GridViewDataTextColumn FieldName="OpeNo" Caption="Ope_No" Width="120">
                                                    <PropertiesTextEdit>
                                                        <ValidationSettings RequiredField-IsRequired="true" />
                                                    </PropertiesTextEdit>
                                                </dx:GridViewDataTextColumn>
                                                <dx:GridViewDataTextColumn FieldName="PR" Caption="PR" Width="120">
                                                    <PropertiesTextEdit>
                                                        <ValidationSettings RequiredField-IsRequired="true" />
                                                    </PropertiesTextEdit>
                                                </dx:GridViewDataTextColumn>
                                                <dx:GridViewDataTextColumn FieldName="Frequency" Caption="頻率" Width="150">
                                                    <EditItemTemplate>
                                                        <div class="frequency-container">
                                                            <dx:ASPxSpinEdit ID="txtFreqCount" runat="server" Width="60px" MinValue="1" MaxValue="100" 
                                                                Value='<%# GetFrequencyCount(Eval("Frequency")) %>' />
                                                            次:
                                                            <dx:ASPxSpinEdit ID="txtFreqUnitCount" runat="server" Width="60px" MinValue="1" MaxValue="100"
                                                                Value='<%# GetFrequencyUnitCount(Eval("Frequency")) %>' />
                                                            <dx:ASPxComboBox ID="cmbFreqUnit" runat="server" Width="60px" 
                                                                Value='<%# GetFrequencyUnit(Eval("Frequency")) %>'>
                                                                <Items>
                                                                    <dx:ListEditItem Text="天" Value="天" />
                                                                    <dx:ListEditItem Text="週" Value="週" />
                                                                </Items>
                                                            </dx:ASPxComboBox>
                                                        </div>
                                                    </EditItemTemplate>
                                                </dx:GridViewDataTextColumn>
                                            </Columns>
                                            <SettingsText EmptyDataRow="無資料" />
                                        </dx:ASPxGridView>
                                    </dx:LayoutItemNestedControlContainer>
                                </LayoutItemNestedControlCollection>
                            </dx:LayoutItem>
                        </Items>
                    </dx:LayoutGroup>
                </Items>
            </dx:ASPxFormLayout>
            
            <dx:ASPxPopupControl ID="popupEditForm" runat="server" HeaderText="新增記錄" 
                PopupHorizontalAlign="WindowCenter" PopupVerticalAlign="WindowCenter" 
                Width="500px" Height="350px" Modal="true">
                <ContentCollection>
                    <dx:PopupControlContentControl>
                        <dx:ASPxFormLayout ID="editFormLayout" runat="server" Width="100%">
                            <Items>
                                <dx:LayoutItem Caption="Chp_Grp">
                                    <LayoutItemNestedControlCollection>
                                        <dx:LayoutItemNestedControlContainer>
                                            <dx:ASPxComboBox ID="cmbChpGrp" runat="server" Width="100%" 
                                                ValueType="System.String" IncrementalFilteringMode="Contains"
                                                TextFormatString="{0}">
                                                <ValidationSettings RequiredField-IsRequired="true" />
                                            </dx:ASPxComboBox>
                                        </dx:LayoutItemNestedControlContainer>
                                    </LayoutItemNestedControlCollection>
                                </dx:LayoutItem>
                                <dx:LayoutItem Caption="Layer">
                                    <LayoutItemNestedControlCollection>
                                        <dx:LayoutItemNestedControlContainer>
                                            <dx:ASPxTextBox ID="txtLayer" runat="server" Width="100%">
                                                <ValidationSettings RequiredField-IsRequired="true" />
                                            </dx:ASPxTextBox>
                                        </dx:LayoutItemNestedControlContainer>
                                    </LayoutItemNestedControlCollection>
                                </dx:LayoutItem>
                                <dx:LayoutItem Caption="Ope_No">
                                    <LayoutItemNestedControlCollection>
                                        <dx:LayoutItemNestedControlContainer>
                                            <dx:ASPxTextBox ID="txtOpeNo" runat="server" Width="100%">
                                                <ValidationSettings RequiredField-IsRequired="true" />
                                            </dx:ASPxTextBox>
                                        </dx:LayoutItemNestedControlContainer>
                                    </LayoutItemNestedControlCollection>
                                </dx:LayoutItem>
                                <dx:LayoutItem Caption="PR">
                                    <LayoutItemNestedControlCollection>
                                        <dx:LayoutItemNestedControlContainer>
                                            <dx:ASPxTextBox ID="txtPR" runat="server" Width="100%">
                                                <ValidationSettings RequiredField-IsRequired="true" />
                                            </dx:ASPxTextBox>
                                        </dx:LayoutItemNestedControlContainer>
                                    </LayoutItemNestedControlCollection>
                                </dx:LayoutItem>
                                <dx:LayoutItem Caption="頻率">
                                    <LayoutItemNestedControlCollection>
                                        <dx:LayoutItemNestedControlContainer>
                                            <div class="frequency-container">
                                                <dx:ASPxSpinEdit ID="txtFreqCount" runat="server" Width="60px" MinValue="1" MaxValue="100" Value="1" />
                                                次:
                                                <dx:ASPxSpinEdit ID="txtFreqUnitCount" runat="server" Width="60px" MinValue="1" MaxValue="100" Value="1" />
                                                <dx:ASPxComboBox ID="cmbFreqUnit" runat="server" Width="60px" Value="天">
                                                    <Items>
                                                        <dx:ListEditItem Text="天" Value="天" />
                                                        <dx:ListEditItem Text="週" Value="週" />
                                                    </Items>
                                                </dx:ASPxComboBox>
                                            </div>
                                        </dx:LayoutItemNestedControlContainer>
                                    </LayoutItemNestedControlCollection>
                                </dx:LayoutItem>
                                <dx:LayoutItem ShowCaption="False">
                                    <LayoutItemNestedControlCollection>
                                        <dx:LayoutItemNestedControlContainer>
                                            <div style="text-align: center; margin-top: 15px;">
                                                <dx:ASPxButton ID="btnSubmit" runat="server" Text="確定" Width="80px" AutoPostBack="false">
                                                    <ClientSideEvents Click="function(s, e) { 
                                                        if(ASPxClientEdit.ValidateGroup('FormValidation')) {
                                                            AddNewRecord();
                                                            popupEditForm.Hide();
                                                        }
                                                    }" />
                                                </dx:ASPxButton>
                                                <dx:ASPxButton ID="btnCancel" runat="server" Text="取消" Width="80px" AutoPostBack="false">
                                                    <ClientSideEvents Click="function(s, e) { popupEditForm.Hide(); }" />
                                                </dx:ASPxButton>
                                            </div>
                                        </dx:LayoutItemNestedControlContainer>
                                    </LayoutItemNestedControlCollection>
                                </dx:LayoutItem>
                            </Items>
                            <SettingsItemCaptions Location="Top" />
                        </dx:ASPxFormLayout>
                    </dx:PopupControlContentControl>
                </ContentCollection>
            </dx:ASPxPopupControl>
        </div>
        
        <dx:ASPxHiddenField ID="hfEditedData" runat="server" ClientInstanceName="hfEditedData" />
        
        <script type="text/javascript">
            function AddNewRecord() {
                var chpGrp = cmbChpGrp.GetValue();
                var layer = txtLayer.GetValue();
                var opeNo = txtOpeNo.GetValue();
                var pr = txtPR.GetValue();
                var freqCount = txtFreqCount.GetValue();
                var freqUnitCount = txtFreqUnitCount.GetValue();
                var freqUnit = cmbFreqUnit.GetValue();
                
                var frequency = freqCount + '次:' + freqUnitCount + freqUnit;
                
                gridToolRank.AddNewRow();
                var keys = gridToolRank.GetRowKey(gridToolRank.GetFocusedRowIndex());
                
                gridToolRank.batchEditApi.SetCellValue(keys, "ChpGrp", chpGrp);
                gridToolRank.batchEditApi.SetCellValue(keys, "Layer", layer);
                gridToolRank.batchEditApi.SetCellValue(keys, "OpeNo", opeNo);
                gridToolRank.batchEditApi.SetCellValue(keys, "PR", pr);
                gridToolRank.batchEditApi.SetCellValue(keys, "Frequency", frequency);
                
                // 清除表單
                txtLayer.SetValue('');
                txtOpeNo.SetValue('');
                txtPR.SetValue('');
                txtFreqCount.SetValue(1);
                txtFreqUnitCount.SetValue(1);
                cmbFreqUnit.SetValue('天');
            }
        </script>
    </form>
</body>
</html>

// Default.aspx.cs - 代碼隱藏文件
using System;
using System.Collections.Generic;
using System.Web.UI;
using DevExpress.Web;
using Newtonsoft.Json;
using SpcToolRankWeb.Data;
using SpcToolRankWeb.Models;

namespace SpcToolRankWeb
{
    public partial class Default : Page
    {
        private OracleDataAccess dataAccess = new OracleDataAccess();
        private List<SpcToolRank> toolRanks = new List<SpcToolRank>();
        
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                LoadData();
                LoadChpGrpList();
            }
            else
            {
                // 從Session中恢復數據
                if (Session["ToolRanks"] != null)
                {
                    toolRanks = (List<SpcToolRank>)Session["ToolRanks"];
                }
            }
        }
        
        private void LoadData(string chpGrpFilter = "")
        {
            toolRanks = dataAccess.GetSpcToolRanks(chpGrpFilter);
            Session["ToolRanks"] = toolRanks;
            gridToolRank.DataSource = toolRanks;
            gridToolRank.DataBind();
        }
        
        private void LoadChpGrpList()
        {
            var chpGrpList = dataAccess.GetChpGrpList();
            cmbChpGrp.DataSource = chpGrpList;
            cmbChpGrp.DataBind();
        }
        
        protected void btnSearch_Click(object sender, EventArgs e)
        {
            string chpGrpFilter = txtSearch.Text.Trim();
            LoadData(chpGrpFilter);
        }
        
        protected void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                List<SpcToolRank> changedItems = toolRanks.FindAll(t => t.State != SpcToolRank.DataState.Unchanged);
                
                if (changedItems.Count > 0)
                {
                    dataAccess.SaveChanges(changedItems);
                    
                    // 重新加載數據
                    string chpGrpFilter = txtSearch.Text.Trim();
                    LoadData(chpGrpFilter);
                    
                    ScriptManager.RegisterClientScriptBlock(this, GetType(), "saveSuccess", 
                        "alert('數據保存成功！');", true);
                }
                else
                {
                    ScriptManager.RegisterClientScriptBlock(this, GetType(), "noChanges", 
                        "alert('沒有需要保存的變更。');", true);
                }
            }
            catch (Exception ex)
            {
                ScriptManager.RegisterClientScriptBlock(this, GetType(), "saveError", 
                    $"alert('保存失敗: {ex.Message}');", true);
            }
        }
        
        protected void gridToolRank_RowInserting(object sender, DevExpress.Web.Data.ASPxDataInsertingEventArgs e)
        {
            var newItem = new SpcToolRank
            {
                ChpGrp = e.NewValues["ChpGrp"]?.ToString(),
                Layer = e.NewValues["Layer"]?.ToString(),
                OpeNo = e.NewValues["OpeNo"]?.ToString(),
                PR = e.NewValues["PR"]?.ToString(),
                Frequency = e.NewValues["Frequency"]?.ToString(),
                State = SpcToolRank.DataState.Added
            };
            
            toolRanks.Add(newItem);
            Session["ToolRanks"] = toolRanks;
            
            e.Cancel = true;
            gridToolRank.CancelEdit();
            gridToolRank.DataSource = toolRanks;
            gridToolRank.DataBind();
        }
        
        protected void gridToolRank_RowUpdating(object sender, DevExpress.Web.Data.ASPxDataUpdatingEventArgs e)
        {
            var index = gridToolRank.FindVisibleIndexByKeyValue(e.Keys["ChpGrp"]);
            if (index >= 0 && index < toolRanks.Count)
            {
                toolRanks[index].Layer = e.NewValues["Layer"]?.ToString();
                toolRanks[index].OpeNo = e.NewValues["OpeNo"]?.ToString();
                toolRanks[index].PR = e.NewValues["PR"]?.ToString();
                
                // 處理頻率
                ASPxSpinEdit freqCount = (ASPxSpinEdit)gridToolRank.FindEditRowCellTemplateControl(
                    (GridViewDataTextColumn)gridToolRank.Columns["Frequency"], "txtFreqCount");
                ASPxSpinEdit freqUnitCount = (ASPxSpinEdit)gridToolRank.FindEditRowCellTemplateControl(
                    (GridViewDataTextColumn)gridToolRank.Columns["Frequency"], "txtFreqUnitCount");
                ASPxComboBox freqUnit = (ASPxComboBox)gridToolRank.FindEditRowCellTemplateControl(
                    (GridViewDataTextColumn)gridToolRank.Columns["Frequency"], "cmbFreqUnit");
                
                if (freqCount != null && freqUnitCount != null && freqUnit != null)
                {
                    string frequency = $"{freqCount.Value}次:{freqUnitCount.Value}{freqUnit.Value}";
                    toolRanks[index].Frequency = frequency;
                }
                
                if (toolRanks[index].State == SpcToolRank.DataState.Unchanged)
                {
                    toolRanks[index].State = SpcToolRank.DataState.Modified;
                }
                
                Session["ToolRanks"] = toolRanks;
            }
            
            e.Cancel = true;
            gridToolRank.CancelEdit();
            gridToolRank.DataSource = toolRanks;
            gridToolRank.DataBind();
        }
        
        protected void gridToolRank_RowDeleting(object sender, DevExpress.Web.Data.ASPxDataDeletingEventArgs e)
        {
            var index = gridToolRank.FindVisibleIndexByKeyValue(e.Keys["ChpGrp"]);
            if (index >= 0 && index < toolRanks.Count)
            {
                toolRanks[index].State = SpcToolRank.DataState.Deleted;
                Session["ToolRanks"] = toolRanks;
            }
            
            e.Cancel = true;
            gridToolRank.DataSource = toolRanks.FindAll(t => t.State != SpcToolRank.DataState.Deleted);
            gridToolRank.DataBind();
        }
        
        protected void gridToolRank_CustomColumnDisplayText(object sender, ASPxGridViewColumnDisplayTextEventArgs e)
        {
            if (e.Column.FieldName == "Frequency")
            {
                string frequency = e.Value?.ToString();
                if (!string.IsNullOrEmpty(frequency))
                {
                    // 可以根據需要自定義顯示格式
                    e.DisplayText = frequency;
                }
            }
        }
        
        // 頻率解析輔助方法
        protected int GetFrequencyCount(object value)
        {
            string frequencyStr = value?.ToString();
            return FrequencySettings.Parse(frequencyStr).Count;
        }
        
        protected int GetFrequencyUnitCount(object value)
        {
            string frequencyStr = value?.ToString();
            return FrequencySettings.Parse(frequencyStr).UnitCount;
        }
        
        protected string GetFrequencyUnit(object value)
        {
            string frequencyStr = value?.ToString();
            return FrequencySettings.Parse(frequencyStr).Unit;
        }
    }
}

// Web.config 配置文件
<?xml version