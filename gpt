// === Default.aspx ===
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="SPCToolWebApp.Default" %>
<%@ Register TagPrefix="dx" Namespace="DevExpress.Web" Assembly="DevExpress.Web.v19.2" %>
<%@ Register TagPrefix="uc1" TagName="FrequencyEditor" Src="~/Controls/FrequencyEditor.ascx" %>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>SPC Tool Web</title>
    <script type="text/javascript">
        function onToolbarClick(s, e) {
            if (e.item.name === "AddItem") {
                popupAdd.Show();
            } else if (e.item.name === "SaveItem") {
                __doPostBack('<%= btnSave.UniqueID %>', '');
            }
        }
    </script>
</head>
<body>
    <form id="form1" runat="server">
        <dx:ASPxMenu ID="toolbar" runat="server" ItemAutoWidth="false" Width="100%" 
            Orientation="Horizontal" ShowPopOutImages="True" SeparatorWidth="10">
            <Items>
                <dx:MenuItem Text="新增" Name="AddItem" Image-Url="~/Images/add.png" />
                <dx:MenuItem Text="儲存" Name="SaveItem" Image-Url="~/Images/save.png" />
                <dx:MenuItem>
                    <ItemStyle Width="300px" />
                    <Template>
                        <dx:ASPxTextBox ID="txtSearch" runat="server" Width="200px" NullText="輸入 chp_grp 搜尋" />
                        <dx:ASPxButton ID="btnSearch" runat="server" Text="搜尋" AutoPostBack="true" OnClick="btnSearch_Click" />
                    </Template>
                </dx:MenuItem>
            </Items>
            <ClientSideEvents ItemClick="onToolbarClick" />
        </dx:ASPxMenu>

        <dx:ASPxButton ID="btnSave" runat="server" Text="儲存" OnClick="btnSave_Click" ClientVisible="false" />

        <dx:ASPxPopupControl ID="popupAdd" runat="server" Width="400px" Modal="true"
            HeaderText="新增項目" CloseAction="CloseButton" PopupHorizontalAlign="WindowCenter"
            PopupVerticalAlign="WindowCenter">
            <ContentCollection>
                <dx:PopupControlContentControl runat="server">
                    <dx:ASPxComboBox ID="ddlChpGrp" runat="server" Width="300px" DropDownStyle="DropDown">
                    </dx:ASPxComboBox>
                    <br /><br />
                    <dx:ASPxButton ID="btnInsert" runat="server" Text="加入" OnClick="btnInsert_Click" />
                </dx:PopupControlContentControl>
            </ContentCollection>
        </dx:ASPxPopupControl>

        <br />

        <dx:ASPxGridView ID="grid" runat="server" AutoGenerateColumns="False" KeyFieldName="ID"
            OnCellEditorInitialize="grid_CellEditorInitialize" OnRowUpdating="grid_RowUpdating"
            OnRowDeleting="grid_RowDeleting" OnRowInserting="grid_RowInserting"
            OnPageIndexChanged="grid_PageIndexChanged" SettingsPager-PageSize="20"
            Settings-EditingMode="Inline">
            <SettingsEditing Mode="Inline" />
            <Columns>
                <dx:GridViewCommandColumn ShowEditButton="true" ShowDeleteButton="true" />
                <dx:GridViewDataTextColumn FieldName="chp_grp" Caption="Chp Grp" />
                <dx:GridViewDataTextColumn FieldName="layer" Caption="Layer" />
                <dx:GridViewDataTextColumn FieldName="ope_no" Caption="OPE No" />
                <dx:GridViewDataTextColumn FieldName="PR" Caption="PR" />
                <dx:GridViewDataTextColumn FieldName="frequency" Caption="頻率">
                    <EditItemTemplate>
                        <uc1:FrequencyEditor ID="FrequencyEditor1" runat="server" />
                    </EditItemTemplate>
                </dx:GridViewDataTextColumn>
            </Columns>
        </dx:ASPxGridView>
    </form>
</body>
</html>


// === Default.aspx.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Web.UI;
using DevExpress.Web;
using Oracle.ManagedDataAccess.Client;

namespace SPCToolWebApp
{
    public partial class Default : Page
    {
        private const string ConnStr = "User Id=YOUR_USER;Password=YOUR_PASS;Data Source=ORCL;";

        private DataTable TempTable
        {
            get => Session["TempTable"] as DataTable;
            set => Session["TempTable"] = value;
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindFlowMapping();
                LoadData();
            }
        }

        private void BindFlowMapping()
        {
            using (var conn = new OracleConnection(ConnStr))
            using (var cmd = new OracleCommand("SELECT DISTINCT chp_grp FROM flow_mapping ORDER BY chp_grp", conn))
            using (var adapter = new OracleDataAdapter(cmd))
            {
                var dt = new DataTable();
                adapter.Fill(dt);
                ddlChpGrp.DataSource = dt;
                ddlChpGrp.TextField = "chp_grp";
                ddlChpGrp.ValueField = "chp_grp";
                ddlChpGrp.DataBind();
            }
        }

        private void LoadData(string chpFilter = "")
        {
            using (var conn = new OracleConnection(ConnStr))
            using (var cmd = new OracleCommand("SELECT * FROM spc_tool_rank" +
                (string.IsNullOrEmpty(chpFilter) ? "" : " WHERE chp_grp = :chp_grp"), conn))
            using (var adapter = new OracleDataAdapter(cmd))
            {
                if (!string.IsNullOrEmpty(chpFilter))
                    cmd.Parameters.Add(":chp_grp", chpFilter);

                var dt = new DataTable();
                adapter.Fill(dt);
                TempTable = dt;
                grid.DataSource = dt;
                grid.DataBind();
            }
        }

        protected void btnInsert_Click(object sender, EventArgs e)
        {
            var dt = TempTable;
            var row = dt.NewRow();
            row["ID"] = Guid.NewGuid().ToString();
            row["chp_grp"] = ddlChpGrp.Text;
            dt.Rows.Add(row);
            TempTable = dt;
            grid.DataSource = dt;
            grid.DataBind();
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                conn.Open();
                foreach (DataRow row in TempTable.Rows)
                {
                    var cmd = new OracleCommand("MERGE INTO spc_tool_rank t USING (SELECT :ID ID FROM dual) s ON (t.ID = s.ID) " +
                        "WHEN MATCHED THEN UPDATE SET chp_grp = :chp_grp, layer = :layer, ope_no = :ope_no, PR = :PR, frequency = :frequency " +
                        "WHEN NOT MATCHED THEN INSERT (ID, chp_grp, layer, ope_no, PR, frequency) VALUES (:ID, :chp_grp, :layer, :ope_no, :PR, :frequency)", conn);
                    cmd.Parameters.Add(":ID", row["ID"]);
                    cmd.Parameters.Add(":chp_grp", row["chp_grp"]);
                    cmd.Parameters.Add(":layer", row["layer"]);
                    cmd.Parameters.Add(":ope_no", row["ope_no"]);
                    cmd.Parameters.Add(":PR", row["PR"]);
                    cmd.Parameters.Add(":frequency", row["frequency"]);
                    cmd.ExecuteNonQuery();
                }
            }
        }

        protected void btnSearch_Click(object sender, EventArgs e)
        {
            var box = toolbar.FindItemByName("txtSearch")?.FindControl("txtSearch") as ASPxTextBox;
            if (box != null)
            {
                LoadData(box.Text.Trim());
            }
        }

        protected void grid_RowUpdating(object sender, DevExpress.Web.Data.ASPxDataUpdatingEventArgs e)
        {
            foreach (var key in e.NewValues.Keys)
                TempTable.Rows.Find(e.Keys["ID"])[key.ToString()] = e.NewValues[key];
            e.Cancel = true;
            grid.CancelEdit();
            grid.DataSource = TempTable;
            grid.DataBind();
        }

        protected void grid_RowInserting(object sender, DevExpress.Web.Data.ASPxDataInsertingEventArgs e)
        {
            var dt = TempTable;
            var row = dt.NewRow();
            foreach (var key in e.NewValues.Keys)
                row[key.ToString()] = e.NewValues[key];
            row["ID"] = Guid.NewGuid().ToString();
            dt.Rows.Add(row);
            e.Cancel = true;
            grid.CancelEdit();
            grid.DataSource = dt;
            grid.DataBind();
        }

        protected void grid_RowDeleting(object sender, DevExpress.Web.Data.ASPxDataDeletingEventArgs e)
        {
            var dt = TempTable;
            var row = dt.Rows.Find(e.Keys["ID"]);
            if (row != null)
                dt.Rows.Remove(row);
            e.Cancel = true;
            grid.DataSource = dt;
            grid.DataBind();
        }

        protected void grid_PageIndexChanged(object sender, EventArgs e)
        {
            grid.DataSource = TempTable;
            grid.DataBind();
        }
    }
}


// ascx
<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="FrequencyEditor.ascx.cs" Inherits="SPCToolWebApp.Controls.FrequencyEditor" %>

<asp:TextBox ID="txtCount" runat="server" Width="50px" CssClass="dx-textbox" />次:

<asp:TextBox ID="txtInterval" runat="server" Width="50px" CssClass="dx-textbox" />
<asp:DropDownList ID="ddlType" runat="server">
    <asp:ListItem Text="天" Value="天" />
    <asp:ListItem Text="週" Value="週" />
</asp:DropDownList>

using System;
using System.Web.UI;

namespace SPCToolWebApp.Controls
{
    public partial class FrequencyEditor : System.Web.UI.UserControl
    {
        public string Value
        {
            get
            {
                if (string.IsNullOrWhiteSpace(txtCount.Text) || string.IsNullOrWhiteSpace(txtInterval.Text))
                    return null;

                return $"{txtCount.Text}次:{txtInterval.Text}{ddlType.SelectedValue}";
            }
            set
            {
                if (!string.IsNullOrWhiteSpace(value))
                {
                    try
                    {
                        var parts = value.Split(':');
                        if (parts.Length == 2)
                        {
                            txtCount.Text = parts[0].Replace("次", "");
                            string unit = parts[1].EndsWith("天") ? "天" : "週";
                            ddlType.SelectedValue = unit;
                            txtInterval.Text = parts[1].Replace(unit, "");
                        }
                    }
                    catch
                    {
                        // 忽略格式錯誤
                    }
                }
            }
        }
    }
}
