using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Web;
using Oracle.ManagedDataAccess.Client;
using DevExpress.Data;

public partial class YourPage : System.Web.UI.Page
{
    // Oracle 连接字符串
    private const string ConnectionString = "YOUR_ORACLE_CONNECTION_STRING";
    
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            // 初始加载下拉框数据
            LoadComboBoxData();
        }
    }
    
    private void LoadComboBoxData()
    {
        ASPxComboBox comboBox = mainToolbar.FindItemTemplateControl("ComboBox", "dataSourceCombo") as ASPxComboBox;
        if (comboBox != null)
        {
            using (OracleConnection conn = new OracleConnection(ConnectionString))
            {
                try
                {
                    conn.Open();
                    string query = "SELECT ID, NAME FROM YOUR_SOURCE_TABLE ORDER BY NAME";
                    OracleCommand cmd = new OracleCommand(query, conn);
                    OracleDataAdapter adapter = new OracleDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    adapter.Fill(dt);
                    
                    comboBox.DataSource = dt;
                    comboBox.DataBind();
                }
                catch (Exception ex)
                {
                    // 处理异常
                    ScriptManager.RegisterClientScriptBlock(this, GetType(), "alert", 
                        $"alert('加载下拉框数据出错: {ex.Message}');", true);
                }
            }
        }
    }

    // 下拉框回调事件
    protected void dataSourceCombo_Callback(object sender, CallbackEventArgsBase e)
    {
        LoadComboBoxData();
    }
    
    // GridView 回调事件 - 用于从第二个表获取数据
    protected void gridViewCallback_Callback(object source, CallbackEventArgs e)
    {
        string selectedValue = e.Parameter;
        if (!string.IsNullOrEmpty(selectedValue))
        {
            FetchDataForGrid(selectedValue);
        }
    }
    
    // 获取数据并加载到 GridView
    private void FetchDataForGrid(string sourceId)
    {
        using (OracleConnection conn = new OracleConnection(ConnectionString))
        {
            try
            {
                conn.Open();
                // 根据选择的值查询第二个表
                string query = "SELECT * FROM YOUR_TARGET_TABLE WHERE SOURCE_ID = :sourceId";
                OracleCommand cmd = new OracleCommand(query, conn);
                cmd.Parameters.Add(new OracleParameter("sourceId", sourceId));
                OracleDataAdapter adapter = new OracleDataAdapter(cmd);
                DataTable dt = new DataTable();
                adapter.Fill(dt);
                
                // 检查是否已存在相同数据
                DataTable currentData = Session["GridViewData"] as DataTable;
                if (currentData == null)
                {
                    currentData = dt.Clone(); // 创建同结构的空表
                    Session["GridViewData"] = currentData;
                }
                
                // 检查并添加不重复的记录
                bool hasNewData = false;
                foreach (DataRow newRow in dt.Rows)
                {
                    // 假设 ID 是唯一标识
                    string id = newRow["ID"].ToString();
                    
                    // 检查是否已存在该记录
                    bool exists = false;
                    foreach (DataRow existingRow in currentData.Rows)
                    {
                        if (existingRow["ID"].ToString() == id)
                        {
                            exists = true;
                            break;
                        }
                    }
                    
                    if (!exists)
                    {
                        currentData.ImportRow(newRow);
                        hasNewData = true;
                    }
                }
                
                if (!hasNewData && dt.Rows.Count > 0)
                {
                    ScriptManager.RegisterClientScriptBlock(this, GetType(), "alert", 
                        "alert('所选数据已全部加载，没有新增记录');", true);
                }
                
                // 绑定 GridView
                gridView.DataSource = currentData;
                gridView.DataBind();
            }
            catch (Exception ex)
            {
                // 处理异常
                ScriptManager.RegisterClientScriptBlock(this, GetType(), "alert", 
                    $"alert('获取数据出错: {ex.Message}');", true);
            }
        }
    }
    
    // 保存数据到数据库的回调方法
    protected void saveCallback_Callback(object source, CallbackEventArgs e)
    {
        SaveToDatabase();
    }
    
    // 保存数据到数据库
    private void SaveToDatabase()
    {
        DataTable dataToSave = Session["GridViewData"] as DataTable;
        if (dataToSave == null || dataToSave.Rows.Count == 0)
        {
            ScriptManager.RegisterClientScriptBlock(this, GetType(), "alert", 
                "alert('没有数据可保存');", true);
            return;
        }
        
        using (OracleConnection conn = new OracleConnection(ConnectionString))
        {
            try
            {
                conn.Open();
                OracleTransaction transaction = conn.BeginTransaction();
                
                try
                {
                    // 获取未保存到数据库的记录（可以通过标志列或其他方式标记）
                    foreach (DataRow row in dataToSave.Rows)
                    {
                        // 检查此行是否需要保存（例如，有一个 IsSaved 标志）
                        if (row.RowState == DataRowState.Added || row.RowState == DataRowState.Modified)
                        {
                            // 构建插入语句
                            string insertSql = "INSERT INTO YOUR_TARGET_TABLE (ID, FIELD1, FIELD2) VALUES (:id, :field1, :field2)";
                            OracleCommand cmd = new OracleCommand(insertSql, conn, transaction);
                            
                            // 添加参数
                            cmd.Parameters.Add(new OracleParameter("id", row["ID"]));
                            cmd.Parameters.Add(new OracleParameter("field1", row["FIELD1"]));
                            cmd.Parameters.Add(new OracleParameter("field2", row["FIELD2"]));
                            
                            cmd.ExecuteNonQuery();
                            
                            // 标记为已保存
                            row.AcceptChanges();
                        }
                    }
                    
                    // 提交事务
                    transaction.Commit();
                    
                    ScriptManager.RegisterClientScriptBlock(this, GetType(), "alert", 
                        "alert('数据保存成功');", true);
                }
                catch (Exception ex)
                {
                    // 回滚事务
                    transaction.Rollback();
                    throw ex;
                }
            }
            catch (Exception ex)
            {
                ScriptManager.RegisterClientScriptBlock(this, GetType(), "alert", 
                    $"alert('保存数据出错: {ex.Message}');", true);
            }
        }
    }
    
    // GridView 行插入事件
    protected void gridView_RowInserting(object sender, DevExpress.Web.Data.ASPxDataInsertingEventArgs e)
    {
        DataTable currentData = Session["GridViewData"] as DataTable;
        if (currentData != null)
        {
            DataRow newRow = currentData.NewRow();
            foreach (var field in e.NewValues.Keys)
            {
                newRow[field.ToString()] = e.NewValues[field];
            }
            
            // 生成临时 ID（实际应用中可能需要从序列或其他方式获取）
            newRow["ID"] = Guid.NewGuid().ToString();
            
            currentData.Rows.Add(newRow);
            Session["GridViewData"] = currentData;
            
            // 阻止默认插入
            e.Cancel = true;
            
            // 重新绑定 GridView
            gridView.DataSource = currentData;
            gridView.DataBind();
        }
    }
    
    // GridView 初始化新行事件
    protected void gridView_InitNewRow(object sender, DevExpress.Web.Data.ASPxDataInitNewRowEventArgs e)
    {
        // 设置新行的默认值
        e.NewValues["FIELD1"] = "";
        e.NewValues["FIELD2"] = "";
    }
    
    // GridView 数据选择前事件
    protected void gridView_BeforePerformDataSelect(object sender, EventArgs e)
    {
        // 使用会话中的数据
        DataTable currentData = Session["GridViewData"] as DataTable;
        if (currentData != null)
        {
            gridView.DataSource = currentData;
        }
    }
}